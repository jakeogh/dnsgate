#!/usr/bin/env python3
# tab-width:4
# pylint: disable=missing-docstring

from .global_vars import CUSTOM_BLACKLIST
from .global_vars import CUSTOM_WHITELIST
from .global_vars import CONFIG_FILE

def make_custom_blacklist_header(path):
    output_file_header = '#' * 64 + '''
# dnsgate custom blacklist
# User-defined blacklisted domains go here.
# Rules defined here override conflicting rules in ''' + CUSTOM_WHITELIST + '''
#
# Examples:
# google.com    # blocks *.google.com
# biz           # blocks the TLD biz completely (*.biz)'''
    return output_file_header

def make_custom_whitelist_header(path):
    output_file_header = '#' * 64 + '''
# dnsgate custom whitelist
# User-defined whitelisted domains go here.
# Usually this is only needed if block_at_psl is enabled in ''' + CONFIG_FILE + '''
# Rules here ARE OVERRIDDEN by any conflicting rules in ''' + CUSTOM_BLACKLIST + '''
#
# Examples:
# s3.amazonaws.com    # allows s3.amazonaws.com
#                           if something.s3.amazonaws.com is in
#                           "dnsmasq generate [sources]" it's still blocked
#                           unless explicitely whitelisted here.
# lwn.net             # allows lwn.net
#                           as above, explicitely blacklisted subdomains are blocked'''
    return output_file_header

def make_output_file_header(config_dict):
    configuration_string = '\n'.join(['#    ' + str(key) + ': ' +
        str(config_dict[key]) for key in sorted(config_dict.keys())])
    output_file_header = '#' * 64 + '''\n#
# AUTOMATICALLY GENERATED BY dnsgate\n#
# CHANGES WILL BE LOST ON THE NEXT RUN.\n#
# EDIT ''' + CUSTOM_BLACKLIST + ' or ' + \
        CUSTOM_WHITELIST + ' instead.\n#\n' + \
        '\n#' + '\n# Configuration:\n' + configuration_string + \
        '\n#\n' + '#' * 64 + '\n\n'
    return output_file_header.encode('utf8')


